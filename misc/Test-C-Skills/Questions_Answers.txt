
1)prototype of memory allocation functions

Information:
1 	void * malloc (size_t) 	malloc (number *sizeof(int));
2 	void * calloc (size_t,size_t) 	calloc (number, sizeof(int));
3 	void * realloc (void*,size_t) 	realloc (pointer_name, number * sizeof(int));
4 	void free (void (*) 	free (pointer_name);

2) what is Callback Functions:

A callback function is a function that is called through a function pointer. 
When you pass the pointer of a function as a parameter to another function, and when that pointer 
is used to call the function it points to a call back is made.

3) what is constant pointer [ it will hold only one assignment[address]]

A constant pointer is declared as follows :
<type of pointer> * const <name of pointer>
An example declaration would look like :

int * const ptr;

3) what is pointer to constant [we can assign the new addrees to pointer, but should not 
change the value]

const <type of pointer>* <name of pointer>
An example of definition could be :
const int* ptr;

4)what is constant pointer to constant [it will hold the address and value, both can not be altered]
const <type of pointer>* const <name of pointer>
for example :
const int* const ptr;

5)What is the difference between int (*p)[3]; vs int *p[3];
	p=p+1==> int * 4  

6) *ptr++ , (*ptr)++ what is the difference?
*ptr++ means ,Increment the Pointer not Value Pointed by It

++*ptr means ,Increment the Value being Pointed to by ptr (*ptr)++

7) what is wild & dangling pointer?,how to avoid it in program?
Dangling pointer:Pointer assigned some memory and then free that memory. 
After freeing when not assigned to NULL 
it still points to same memory address, such pointer are dangling pointer.

Wild pointer:Pointer which are not initialized during its definition holding some 
junk value( a valid address) are Wild pointer.

8) Size of data type depends on which compiler we use?
A) yes, for my gcc in 64bit machine gcc 4.9.2 version
char       - 1Byte [Independet of Compiler]
short int  - 2Byte
int        - 4Byte [Independet of Compiler , min 2, max 4]
float      - 4Byte [Independet of Compiler]
double     - 8Byte [Independet of Compiler]
Long double- 16Byte

char*      - 8Byte (for 64bit machine)

9)Represntation of positive and negative numbers in C langauge/compiler?


There are three well known methods for representing negative values in binary:

Signed magnitude. This is the easiest to understand, because it works the same as we are 
  used to when dealing with negative decimal values: The first position (bit) represents the sign
 (0 for positive, 1 for negative), and the other bits represent the number. 
 Although it is easy for us to understand, it is hard for computers to work with, 
 especially when doing arithmetic with negative numbers.
   
In 8-bit signed magnitude, the value 8 is represented as 0 0001000 and -8 as 1 0001000.

 One's complement. In this representation, negative numbers are created from the corresponding positive number
 by flipping all the bits and not just the sign bit. This makes it easier to work with negative numbers for a computer,
 but has the complication that there are two distinct representations for +0 and -0. 
 The flipping of all the bits makes this harder to understand for humans.
    In 8-bit one's complement, the value 8 is represented as 00001000 and -8 as 11110111.

    Two's complement. This is the most common representation used nowadays for negative integers because 
it is the easiest to work with for computers, but it is also the hardest to understand for humans. 
When comparing the bit patterns used for negative values between one's complement and two's complement,
it can be observed that the same bit pattern in two's complement encodes for the next lower number. 
For example 11111111 stands for -0 in one's complement and for -1 in two's complement, and similarly for 10000000 (-127 vs -128).
    In 8-bit two's complement, the value 8 is represented as 00001000 and -8 as 11111000.

10)typedef vs #define

    #define is a C-directive which is also used to define the aliases for various data types similar to typedef
	 but with the following differences âˆ’
    typedef is limited to giving symbolic names to types only where as #define can be used to define alias 
	for values as well, q., you can define 1 as ONE etc.
    typedef interpretation is performed by the compiler whereas #define statements are processed by the pre-processor.

11)stack underflow - 
Computer Definition. An error condition that occurs when an item is called for from the stack, but the stack is empty. Contrast with stack overflow.

Now that we have a basic picture in mind of what a stack conceptually looks like, we can define what underflow and overflow are. 
Stack underflow happens when we try to pop (remove) an item from the stack, when nothing is actually there to remove. 
This will raise an alarm of sorts in the computer, because we told it to do something that cannot be done.

Stack overflow happens when we try to push one more item onto our stack than it can actually hold. You see, 
the stack usually can only hold so much stuff. Typically, we allocate (set aside) where the stack is going to 
be in memory and how big it can get. So, when we stick too much stuff there or try to remove nothing, 
we will generate a stack overflow condition or stack underflow condition, respectively.

12)Enumerated Types are a special way of creating your own Type in C. The type is a "list of key words". 
Enumerated types are used to make a program clearer to the reader/maintainer of the program.

enum week{ sunday, monday, tuesday, wednesday, thursday, friday, saturday};
enum week today;
enum boolean{    false;    true;};
enum boolean check;
enum month {JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,DEC};
enum month rmonth;
enum compass_direction  {north,    east,    south,    west  };
enum compass_direction my_direction;
enum planets  {Mercury,    Venus,    Earth,    Mars,    Jupiter,    Saturn,    Uranus,    Neptune,    Pluto  };
enum planets planet1, planet2;

13)pointer dereference
The operator * is used to do this, and is called the dereferencing operator. 
int a = 10; int* ptr = &a; printf("%d", *ptr);
// With *ptr I'm dereferencing the pointer. // Which means, I am asking the value pointed at by the pointer. 
// ptr is pointing to the location in memory of the variable a.

Dereferencing Operation is performed to access or manipulate data contained in memory location pointed to by a pointer

14) inline vs macro

15) typedef vs macro

16) sections of code

17) storage types, application use cases

18) for, do-while,while ===> decementing loop

19) optimization levels

20) volatile key word, const attribute

21)difference between declaation  vs defination
